section .text
global hsvmhr
hsvmhr:
	push	ebp
	mov	ebp, esp
.L5:
	mov	eax, [ebp+8] 
	mov	eax, [eax]
	mov	edx, [ebp+12]
	mov	edx, [edx]
	movzx eax, al // moving a number in zero extention first byte to eax.  eax: ax first byte. ax has al ah (high low)
	movzx edx, dl
	sub	eax, edx //subtraction
	je	.L2 //equals 0
	jmp	.L3 //diff then 0


.L2: // if dl = 0 end of program, return eax=0.  ELSE l4.
	test dl, dl //AND on arguments and doesnt change the values! dl dl =>> dl != 0  (is dl zero?)
	jne	.L4      //dl!=0
	xor	eax, eax //dl ==0 strong or . iff only one arg is 1. makes eax 0000. short way to do mov eax 0
	jmp	.L3

.L4:
	add	DWORD [ebp+8], 1   //address of first arg
	add	DWORD [ebp+12], 1   //address of second arg   //eax return value on "ret" command
	jmp	.L5


.L3:
	pop	ebp
	ret
